//我第一次是很朴素的想法，每次旋转一个，保存最后一个，把前n-1个数往后挪一位，最后一个数放在第一个位置上。旋转k次

void rotate(int* nums, int numsSize, int k)
{
    k=k%numsSize;//考虑k的值大于numsSize的情况
    int i=0,tmp=0;
    for(i=0;i<k;i++)
    {
        tmp=nums[numsSize-1];
        for(int j=numsSize-1;j>0;j--)
        {
            nums[j]=nums[j-1];
        }
        nums[0]=tmp;
    }
}

-----------------------------------------------------------------------------------------------------------------
//第二次是开辟了一个大小为numsSize的临时数组，把原数组里的数字按要求排列在临时数组里。然后把临时数组拷贝到原数组中即可

void rotate(int* nums, int numsSize, int k)
{
    
    int newArr[numsSize];
    for (int i = 0; i < numsSize; ++i) {
        newArr[(i+k)%numsSize] = nums[i];
        //把数字按要求放在临时数组内
    }
    for (int i = 0; i < numsSize; ++i) {
        nums[i] = newArr[i];
    }

}

-------------------------------------------------------------------------------------------------------------------------
//第三次是把前面n-k个数逆置一下，后面k个数逆置一下，再整体逆置一下

void reverse(int* nums,int left,int right)
{
    while(left<right)
    {
        int tmp=nums[left];
        nums[left]=nums[right];
        nums[right]=tmp;
        left++;
        right--;
    }
}

void rotate(int* nums, int numsSize, int k)
{  
    k%=numsSize; //如果没有这一步，可能会发生越界。
    reverse(nums,0,numsSize-1-k);//把前面的数逆置
    reverse(nums,numsSize-k,numsSize-1);//把后面的数字逆置
    reverse(nums,0,numsSize-1);//把整体逆置
    
    //1 2 3 4 5 6 7    
    //4 3 2 1 7 6 5   前后分别逆置
    //5 6 7 1 2 3 4   整体再次逆置

}

